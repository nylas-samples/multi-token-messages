"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var nylas_api_error_1 = __importDefault(require("./nylas-api-error"));
/**
 * This error class represents a 429 error response, with details on the rate limit
 */
var RateLimitError = /** @class */ (function (_super) {
    __extends(RateLimitError, _super);
    function RateLimitError(type, message, rateLimit, rateLimitReset) {
        var _this = _super.call(this, RateLimitError.RATE_LIMIT_STATUS_CODE, type, message) || this;
        _this.rateLimit = rateLimit;
        _this.rateLimitReset = rateLimitReset;
        return _this;
    }
    /**
     * Parses an API response and generates a 429 error with details filled in
     * @param parsedApiError The response parsed as a JSON
     * @param headers The response headers
     * @return The error with the rate limit details filled in
     */
    RateLimitError.parseErrorResponse = function (parsedApiError, headers) {
        var rateLimit = Number(headers.get(this.RATE_LIMIT_LIMIT_HEADER)) || undefined;
        var rateLimitReset = Number(headers.get(this.RATE_LIMIT_RESET_HEADER)) || undefined;
        return new RateLimitError(parsedApiError.type, parsedApiError.message, rateLimit, rateLimitReset);
    };
    RateLimitError.RATE_LIMIT_STATUS_CODE = 429;
    RateLimitError.RATE_LIMIT_LIMIT_HEADER = 'X-RateLimit-Limit';
    RateLimitError.RATE_LIMIT_RESET_HEADER = 'X-RateLimit-Reset';
    return RateLimitError;
}(nylas_api_error_1.default));
exports.default = RateLimitError;
